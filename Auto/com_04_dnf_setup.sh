#!/bin/bash
#
# dnf_setup.sh - автоматизация задания №4 по устаовке с помщью пакетного менеджера различных утилит
#
# Запускать от root:  sudo ./add_wheel_users.sh


# ──────────────────────────────
# Шаг 0. Требования запустить от root
# ──────────────────────────────
# Проверяем, запущен ли скрипт с привилегиями суперпользователя (sudo)
    # $EUID    — переменная Bash, содеражит UID текущего процесса
    # $EUID    — вернет 0, если script запущен от sudo
    # -ne 0    — оператор “not equal”. Проверяет, что значение слева не равно 0
    # [[ … ]]  — внутри выражение проверяется на истинность. Код = 0, если истина. Код = 1, если ложь.
    # [[ $EUID -ne 0 ]] — истина, если текущий UID не 0 (то есть не запущено под sudo)
    # если не равно 0, то выведется сообщение и script завершится с кодом 1
if [[ $EUID -ne 0 ]]; then
  echo "Запустите скрипт от root!"
  exit 1
fi

# ──────────────────────────────
# Шаг 1. Подключаем дополнительные репозитории (если ещё не включены)
# ──────────────────────────────
# EPEL 8 – пакет для screen и pwgen
if ! rpm -q oracle-epel-release-el8 >/dev/null 2>&1; then
    # rpm -q oracle-epel-release-el8
    #   — проверяет, установлен ли пакет oracle-epel-release-el8
    # >/dev/null 2>&1
    #   — перенаправляет вывод в «чёрную дыру», нам важен только код возврата
    # Код возврата 0 -> пакет есть; любой другой -> нет пакета
    echo "==> Устанавливаем метапакет oracle-epel-release-el8 (EPEL 8)…"
    dnf -y install oracle-epel-release-el8
fi
if ! rpm -q oracle-epel-release-el8 >/dev/null 2>&1; then
    echo "==> Устанавливаем метапакет oracle-epel-release-el8 (EPEL 8)…"
    dnf -y install oracle-epel-release-el8
fi

echo "==> Обновляем кэш репозиториев…"
# dnf makecache -y
#   — загружает и обновляет метаданные репозиториев без запроса подтверждения
dnf makecache -y

# ──────────────────────────────
# Шаг 2. Определяем группы пакетов
# ──────────────────────────────
# 2.1. Текстовые редакторы и консольные утилиты
editors=(vim-enhanced nano mc screen)

# 2.2. Сетевые утилиты
network=(wget curl telnet nmap-ncat tcpdump net-tools bind-utils)

# 2.3. Инструменты для работы с хранилищем и файловой системой
storage=(autofs nfs-utils cloud-utils-growpart lsof sysfsutils sg3_utils)

# 2.4. Мониторинг системы
monitor=(sysstat)

# 2.5. Общие утилиты
general=(pwgen bc unzip glibc-langpack-ru)

# 2.6. Инструменты разработки
devtools=(git)

# 2.7. Единый массив для установки всех групп пакетов
#    all_pkgs — собирает вместе все элементы предыдущих массивов
all_pkgs=(
  "${editors[@]}"
  "${network[@]}"
  "${storage[@]}"
  "${monitor[@]}"
  "${general[@]}"
  "${devtools[@]}"
)

# ──────────────────────────────
# Шаг 3. Устанавливаем базовые утилиты
# ──────────────────────────────
# ${#all_pkgs[@]} — количество пакетов в массиве all_pkgs
echo "==> Устанавливаем базовые утилиты (${#all_pkgs[@]} пакетов)…"
# dnf install -y — устанавливает без подтверждения (-y)
# "${all_pkgs[@]}" — разворачивает массив всех нужных пакетов
dnf install -y "${all_pkgs[@]}"

# ──────────────────────────────
# Шаг 4. Устанавливаем PostgreSQL 15
# ──────────────────────────────
echo "==> Переключаемся на модуль PostgreSQL 15 и ставим сервер+клиент…"
#   — отмена любых предыдущих настроек модуля (сброс потоков)
dnf module reset  -y postgresql
#   — включает поток версии 15 модуля postgresql
dnf module enable -y postgresql:15
#   — устанавливает пакет сервера и клиентскую утилиту PostgreSQL
dnf install       -y postgresql-server postgresql

# ──────────────────────────────
# Шаг 5. Проверка, что всё установлено
# ──────────────────────────────
missing=() # массив для хранения имён пакетов, которые не установлены
for pkg in "${all_pkgs[@]}" postgresql postgresql-server; do
  # Проверяем, установлен ли пакет pkg
  # rpm -q "$pkg"        — запросит информацию о пакете
  # &>/dev/null          — подавляет вывод (stdout и stderr), важен только код возврата
  if ! rpm -q "$pkg" &>/dev/null; then
    # Если код возврата не 0 -> пакет не найден, добавляем его в список missing
    missing+=("$pkg")
  fi
done

# ${#missing[@]} - количество элементов в missing
if ((${#missing[@]})); then
  # Если массив не пустой -> выводим сообщение и завершаем скрипт с кодом 2
  echo "Не удалось установить следующие пакеты: ${missing[*]}" >&2
  exit 2
else
  # Иначе: сообщение, что все успешно
  echo "Проверка пройдена успешно: все пакеты на месте."
fi

# ──────────────────────────────
# Шаг 6. Итоговый отчёт, если все пакеты на месте
# ──────────────────────────────
echo -e "\n===== Итоговая сводка ====="
echo "Редакторы и управление сессиями:"
printf '  • %s\n' "${editors[@]}"

echo -e "\nСетевые клиенты и диагностика:"
printf '  • %s\n' "${network[@]}"

echo -e "\nФайловые системы и хранение:"
printf '  • %s\n' "${storage[@]}"

echo -e "\nСистемный мониторинг и диагностика:"
printf '  • %s\n' "${monitor[@]}"

echo -e "\nУтилиты общего назначения:"
printf '  • %s\n' "${general[@]}"

echo -e "\nРазработка и контроль версий:"
printf '  • %s\n' "${devtools[@]}"

echo -e "\nУстановлен модуль PostgreSQL 15:"
echo '  • postgresql-server (15)'
echo '  • postgresql (клиент 15)'
echo "==========================="
echo "Готово."
